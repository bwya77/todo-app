// MARK: - Month Calendar View
struct MonthCalendarView: View {
    @Binding var visibleMonth: Date
    @Binding var selectedDate: Date?
    let tasks: [Item]
    
    private let calendar = Calendar.current
    private let columns = Array(repeating: GridItem(.flexible(), spacing: 0), count: 7)
    private let weekdaySymbols = Calendar.current.shortWeekdaySymbols
    
    var body: some View {
        VStack(spacing: 0) {
            // Weekday header
            HStack(spacing: 0) {
                ForEach(weekdaySymbols, id: \.self) { weekday in
                    Text(weekday)
                        .font(.caption)
                        .fontWeight(.medium)
                        .foregroundColor(.secondary)
                        .frame(maxWidth: .infinity)
                        .padding(.vertical, 8)
                }
            }
            .padding(.horizontal, 0)
            // Add a horizontal divider with zero padding
            Divider()
                .padding(0)
            
            // Calendar grid with gesture support
            GeometryReader { geometry in
                ZStack {
                    LazyVGrid(columns: columns, spacing: 0) {
                        // Day cells with grid lines
                        ForEach(days, id: \.id) { day in
                            CalendarDayCellView(
                                day: day,
                                isSelected: selectedDate != nil && calendar.isDate(day.date, inSameDayAs: selectedDate!),
                                onSelect: {
                                    selectedDate = day.date
                                },
                                tasks: tasksForDate(day.date)
                            )
                            .onTapGesture {
                                selectedDate = day.date
                            }
                            .frame(height: geometry.size.height / 6.001) // Force division to fill entire height
                            .overlay(
                                Rectangle()
                                    .stroke(Color.gray.opacity(0.2), lineWidth: 0.5)
                            )
                        }
                    }
                }
            }
        }
    }
    
    // Calculate all visible days for the month
    private var days: [CalendarDay] {
        // Get the first day of the month
        let components = calendar.dateComponents([.year, .month], from: visibleMonth)
        let firstDayOfMonth = calendar.date(from: components)!
        
        // Get the weekday of the first day (0-based where 0 is Sunday)
        let firstWeekday = calendar.component(.weekday, from: firstDayOfMonth) - 1
        
        // Get the number of days in the month
        let daysInMonth = calendar.range(of: .day, in: .month, for: visibleMonth)?.count ?? 30
        
        var days: [CalendarDay] = []
        
        // Add days from the previous month to fill the first row
        if firstWeekday > 0 {
            for dayOffset in (1...firstWeekday).reversed() {
                if let date = calendar.date(byAdding: .day, value: -dayOffset, to: firstDayOfMonth) {
                    days.append(CalendarDay(date: date, isCurrentMonth: false))
                }
            }
        }
        
        // Add days from the current month
        for day in 1...daysInMonth {
            if let date = calendar.date(byAdding: .day, value: day - 1, to: firstDayOfMonth) {
                days.append(CalendarDay(date: date, isCurrentMonth: true))
            }
        }
        
        // Add days from the next month to complete the grid
        let remainingCells = 42 - days.count // 6 rows of 7 days
        if remainingCells > 0 {
            let lastDayOfMonth = calendar.date(byAdding: .day, value: daysInMonth - 1, to: firstDayOfMonth)!
            for day in 1...remainingCells {
                if let date = calendar.date(byAdding: .day, value: day, to: lastDayOfMonth) {
                    days.append(CalendarDay(date: date, isCurrentMonth: false))
                }
            }
        }
        
        return days
    }
    
    private func tasksForDate(_ date: Date) -> [Item] {
        return tasks.filter { task in
            guard let taskDate = task.dueDate else { return false }
            return calendar.isDate(taskDate, inSameDayAs: date)
        }
    }
}