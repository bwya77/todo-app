//
//  DisplayOrderManager.swift
//  todo-app
//
//  Created on 3/19/25.
//

import Foundation
import CoreData

/// Critical utility for management of task display order
struct DisplayOrderManager {
    
    /// Ensures all tasks have display order attribute
    static func ensureDisplayOrderExists() {
        print("üîç Ensuring displayOrder attribute exists for all tasks")
        
        // Get the context
        let context = PersistenceController.shared.container.viewContext
        
        // Fetch all tasks
        let fetchRequest: NSFetchRequest<Item> = Item.fetchRequest()
        
        do {
            let items = try context.fetch(fetchRequest)
            print("üìä Found \(items.count) tasks to check")
            
            var fixedCount = 0
            
            // Check each item for displayOrder property
            for item in items {
                if item.value(forKey: "displayOrder") == nil {
                    // Set a default value
                    item.setValue(999, forKey: "displayOrder")
                    fixedCount += 1
                }
            }
            
            if fixedCount > 0 {
                try context.save()
                print("‚úÖ Fixed displayOrder for \(fixedCount) tasks")
            } else {
                print("‚úì All tasks have displayOrder attribute")
            }
        } catch {
            print("‚ùå Error checking displayOrder: \(error)")
        }
    }
    
    /// Repair task ordering for all items
    static func repairAllTaskOrder() {
        print("üîß Repairing all task order")
        
        // Get the context
        let context = PersistenceController.shared.container.viewContext
        
        // Ensure all items have displayOrder
        ensureDisplayOrderExists()
        
        // Group tasks by project and assign display order
        let fetchRequest: NSFetchRequest<Item> = Item.fetchRequest()
        
        do {
            let items = try context.fetch(fetchRequest)
            
            // Group by project
            let itemsByProject = Dictionary(grouping: items) { item in
                item.project?.objectID.uriRepresentation().absoluteString ?? "no-project"
            }
            
            print("üìã Repairing \(itemsByProject.count) groups of tasks")
            
            // Reindex each group
            for (projectKey, projectItems) in itemsByProject {
                // Sort by creation date as a fallback
                let sortedItems = projectItems.sorted { 
                    ($0.createdDate ?? Date.distantPast) < ($1.createdDate ?? Date.distantPast)
                }
                
                print("  üîÑ Repairing order for group: \(projectKey) (\(sortedItems.count) tasks)")
                
                // Assign display order with spacing
                for (index, item) in sortedItems.enumerated() {
                    let newOrder = Int32(index * 10)
                    item.setValue(newOrder, forKey: "displayOrder")
                }
            }
            
            // Save the context
            try context.save()
            print("‚úÖ All task ordering repaired")
            
            // Force a refresh notification
            NotificationCenter.default.post(
                name: NSNotification.Name.NSManagedObjectContextDidSave,
                object: context
            )
        } catch {
            print("‚ùå Error repairing task order: \(error)")
        }
    }
}